.page-contents-wrapper {
  /**
* This file contains critical variabes, NEED to be import in every "get togather" less files, and in the first import order.
* 此文件为基础关键变量，尽量在汇总性less文件中，第一个引入。
*/
  /*
    Mixins

    these contents wouldn't be output to the actual css unless it's used somewhere.

    除非在引入的less文件中使用，否则这些mixin将不会被全部包含在最终css里。
*/
}
.page-contents-wrapper .mixin_btn-solid {
  display: inline-block;
  color: white;
  border: 1px solid #ed6d00;
  background-color: #ed6d00;
  padding: 1em 3em;
  border-radius: 5px;
}
.page-contents-wrapper .mixin_btn-hollow {
  display: inline-block;
  color: #ed6d00;
  background-color: #fff5ed;
  border: 1px solid #ed6d00;
  padding: 1em 3em;
  border-radius: 5px;
}
.page-contents-wrapper .log-head {
  padding: 2em 0 1em;
  border-bottom: 2px solid #ed6d00;
}
.page-contents-wrapper .log-head .container > * {
  display: inline-block;
  vertical-align: middle;
}
.page-contents-wrapper .log-head .head-right {
  float: right;
  font-size: 14px;
  position: absolute;
  bottom: 6px;
  right: 20px;
}
.page-contents-wrapper .log-head .head-right .orange {
  color: #ed6d00;
}
.page-contents-wrapper .log-head .logo-right {
  margin-left: 18px;
  border-left: 1px solid #ccc;
}
.page-contents-wrapper .log-head .logo-right h2 {
  color: black;
  padding: 1em 1em;
  font-weight: 500;
}
.page-contents-wrapper .register-central {
  margin-top: 30px;
}
.page-contents-wrapper .register-central .gift {
  padding-top: 20px;
}
.page-contents-wrapper .register-central .gift img {
  width: 100%;
}
.page-contents-wrapper .register-central form .info-inputs {
  padding: 3em 0 1.5em;
}
.page-contents-wrapper .register-central form .info-inputs input {
  display: block;
  font-size: 14px;
  width: 100%;
  padding: 1em 1.5em;
  border: 1px solid #ccc;
  margin-top: .6em;
}
.page-contents-wrapper .register-central form .proto {
  font-size: 14px;
  color: #333333;
}
.page-contents-wrapper .register-central form .proto input {
  margin-right: 10px;
}
.page-contents-wrapper .register-central form .proto > * {
  display: inline-block;
  vertical-align: middle;
}
.page-contents-wrapper .register-central form .proto a {
  color: #ed6d00;
  cursor: pointer;
}
.page-contents-wrapper .register-central form .log-btn button {
  padding: 18px 0;
  background: #ed6d00;
  color: white;
  font-size: 16px;
  cursor: pointer;
  margin-top: 1em;
  width: 100%;
}
.page-contents-wrapper .right {
  float: right;
}
.page-contents-wrapper .log-footer {
  padding-top: 2em;
  margin-top: 5em;
  padding-bottom: 2em;
  text-align: center;
  border-top: 1px solid #9e9e9e;
}
.page-contents-wrapper .log-footer table {
  margin: auto;
  width: 60%;
  margin-bottom: 2em;
}
.page-contents-wrapper .log-footer table td {
  font-size: 13px;
}
.page-contents-wrapper .log-footer table td:hover {
  color: #ed6d00;
}
.page-contents-wrapper .log-footer p {
  font-size: 13px;
}
.page-contents-wrapper .wrap {
  position: relative;
}
.page-contents-wrapper .agreement {
  display: none;
  position: absolute;
  width: 45%;
  height: 500px;
  background: white;
  border: 1px solid #d7d7d7;
  top: 130px;
  left: 26%;
  margin: 0 auto;
  z-index: 6;
  text-align: center;
  overflow: auto;
  padding: 20px;
}
.page-contents-wrapper .agreement h1 {
  line-height: 50px;
}
.page-contents-wrapper .agreement h3 {
  text-align: left;
  line-height: 30px;
}
.page-contents-wrapper .agreement p {
  text-align: left;
  line-height: 25px;
}
.page-contents-wrapper .agreement .statement {
  font-weight: bold;
}
.page-contents-wrapper .agreement .close {
  position: absolute;
  right: 20px;
  top: 15px;
  cursor: pointer;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
