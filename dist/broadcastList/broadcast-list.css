/**
* This file contains critical variabes, NEED to be import in every "get togather" less files, and in the first import order.
* 此文件为基础关键变量，尽量在汇总性less文件中，第一个引入。
*/
/*
    Mixins

    these contents wouldn't be output to the actual css unless it's used somewhere.

    除非在引入的less文件中使用，否则这些mixin将不会被全部包含在最终css里。
*/
.mixin_btn-solid {
  display: inline-block;
  color: white;
  border: 1px solid #ed6d00;
  background-color: #ed6d00;
  padding: 1em 3em;
  border-radius: 5px;
}
.mixin_btn-hollow {
  display: inline-block;
  color: #ed6d00;
  background-color: #fff5ed;
  border: 1px solid #ed6d00;
  padding: 1em 3em;
  border-radius: 5px;
}
.page-contents-wrapper .banner {
  width: 100%;
  height: 450px;
  background-repeat: no-repeat;
  background-position: center center;
}
.page-contents-wrapper .container .tabs-bar {
  margin-top: 30px;
}
.page-contents-wrapper .container .tabs-bar span {
  font-size: 14px;
  color: #666666;
}
.page-contents-wrapper .container .tabs-bar a {
  display: inline-block;
  padding: 8px 16px;
  margin-left: 10px;
  font-size: 14px;
  color: #666666;
}
.page-contents-wrapper .container .tabs-bar .active {
  background: #ed6d00;
  color: white;
}
.page-contents-wrapper .container .list .none-course {
  text-align: center;
  line-height: 160px;
  font-size: 26px;
}
.page-contents-wrapper .container .list .blockies {
  height: 304px;
  border: 1px solid #dadada;
  padding: 10px;
  margin-top: 23px;
}
.page-contents-wrapper .container .list .blockies:hover {
  position: relative;
  z-index: 99;
  box-shadow: 0 0 15px;
  border-color: #ed6d00;
}
.page-contents-wrapper .container .list .blockies .img-holder {
  width: 100%;
  height: 172px;
}
.page-contents-wrapper .container .list .blockies .img-holder img {
  width: 100%;
  height: 136.5px;
}
.page-contents-wrapper .container .list .blockies .img-holder .current-state-bar {
  width: 100%;
  height: 35px;
  background: #333333;
  text-align: right;
  line-height: 35px;
  color: white;
  padding-right: 8px;
  font-size: 14px;
}
.page-contents-wrapper .container .list .blockies .img-holder .current-state-bar .current-state {
  display: inline-block;
  width: 74px;
  height: 35px;
  background: #ed6d00;
  text-align: center;
  line-height: 35px;
  color: white;
  float: left;
}
.page-contents-wrapper .container .list .blockies .text-holder {
  font-size: 12px;
  height: 100px;
}
.page-contents-wrapper .container .list .blockies .text-holder p:nth-child(1) {
  height: 40px;
  overflow: hidden;
}
.page-contents-wrapper .container .list .blockies .text-holder p {
  line-height: 20px;
  margin-top: 10px;
  overflow: hidden;
}
.page-contents-wrapper .container .list .blockies .text-holder p .time-bold {
  font-weight: bold;
  margin-right: 6px;
  color: #333333;
}
.page-contents-wrapper .container .list .blockies .text-holder p a {
  font-weight: bold;
  float: right;
  color: #ed6d00;
}
.page-contents-wrapper .container .list .block2 .img-holder .current-state {
  background: #14b114!important;
}
.page-contents-wrapper .container .list .block2 .text-holder a {
  color: #14b114!important;
}
.page-contents-wrapper .container .list .block3 .img-holder .current-state {
  background: #797979!important;
}
.page-contents-wrapper .container .list .block3 .text-holder a {
  color: #333333!important;
}
.page-contents-wrapper .container .page {
  height: 100px;
}
.page-contents-wrapper #video-num {
  display: none;
}
.page-contents-wrapper .engage-success {
  font-size: 30px;
  text-align: center;
  line-height: 45px;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
